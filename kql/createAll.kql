
// connect to operational Database with external table Product
.create external table products (ProductID: int, ProductNumber: string,  Name: string) 
kind=sql
table=[SalesLT.Product]
( 
   h@'Server=tcp:<sql server name>.database.windows.net,1433;Initial Catalog=aworks;User Id=SqlAdmin;Password=ChangeYourAdminPassword1'
)
with 
(
   createifnotexists = true
)  

// create tables for Orders + transformations 
.create table [bronzeOrders] (SalesOrderID:long,SalesOrderDetailID:long,OrderQty:long,ProductID:int,UnitPrice:real,UnitPriceDiscount:real,LineTotal:real,ModifiedDate:datetime)

.create table [orders] (SalesOrderID:long,SalesOrderDetailID:long,OrderQty:long,ProductID:int,UnitPrice:real,UnitPriceDiscount:real,LineTotal:real,ModifiedDate:datetime, UnitFinalPrice:real, PurchaseDate:datetime)

// use update policies to transform data during Ingestion
.create function
with (docstring = 'Ingest raw orders data and calculate the final unit price')
ParseOrders ()
{
bronzeOrders
| extend UnitFinalPrice = round(UnitPrice * (1-UnitPriceDiscount),2)
| extend PurchaseDate = todatetime(split(ModifiedDate, " ")[0])
}

.alter table
orders 
policy update @'[{"Source": "bronzeOrders", "Query": "ParseOrders", "IsEnabled" : true, "IsTransactional": true }]'


//create events tables
.create table events (eventType: string, eventID: guid, eventDate: datetime, productId: int, userAgent: dynamic, device: string, ip_address:string, referer: dynamic, page_loading_seconds: real) 



//change batching policy time to 10 seconds to reflect ingestion changes faster
.alter tables (events, bronzeOrders, orders) policy ingestionbatching
```
{
    "MaximumBatchingTimeSpan" : "00:00:10",
    "MaximumNumberOfItems" : 20,
    "MaximumRawDataSizeMB": 300
}
```

// use materialized views to view the latest changes in the orders table
.create async materialized-view with (backfill=true) ordersLatest on table orders
{
    orders
    | summarize arg_max(ModifiedDate, *) by SalesOrderDetailID
}


